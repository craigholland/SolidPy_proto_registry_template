"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import solidpy_test_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SolidPyTestStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetPerson: grpc.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Person,
    ]

    GetOrganization: grpc.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Organization,
    ]

    GetParty: grpc.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Party,
    ]

    CreateParty: grpc.UnaryUnaryMultiCallable[
        solidpy_test_pb2.CreatePartyRequest,
        solidpy_test_pb2.BasicID,
    ]

    DeleteParty: grpc.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        google.protobuf.empty_pb2.Empty,
    ]

class SolidPyTestAsyncStub:
    GetPerson: grpc.aio.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Person,
    ]

    GetOrganization: grpc.aio.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Organization,
    ]

    GetParty: grpc.aio.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        solidpy_test_pb2.Party,
    ]

    CreateParty: grpc.aio.UnaryUnaryMultiCallable[
        solidpy_test_pb2.CreatePartyRequest,
        solidpy_test_pb2.BasicID,
    ]

    DeleteParty: grpc.aio.UnaryUnaryMultiCallable[
        solidpy_test_pb2.BasicID,
        google.protobuf.empty_pb2.Empty,
    ]

class SolidPyTestServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetPerson(
        self,
        request: solidpy_test_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[solidpy_test_pb2.Person, collections.abc.Awaitable[solidpy_test_pb2.Person]]: ...

    @abc.abstractmethod
    def GetOrganization(
        self,
        request: solidpy_test_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[solidpy_test_pb2.Organization, collections.abc.Awaitable[solidpy_test_pb2.Organization]]: ...

    @abc.abstractmethod
    def GetParty(
        self,
        request: solidpy_test_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[solidpy_test_pb2.Party, collections.abc.Awaitable[solidpy_test_pb2.Party]]: ...

    @abc.abstractmethod
    def CreateParty(
        self,
        request: solidpy_test_pb2.CreatePartyRequest,
        context: _ServicerContext,
    ) -> typing.Union[solidpy_test_pb2.BasicID, collections.abc.Awaitable[solidpy_test_pb2.BasicID]]: ...

    @abc.abstractmethod
    def DeleteParty(
        self,
        request: solidpy_test_pb2.BasicID,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

def add_SolidPyTestServicer_to_server(servicer: SolidPyTestServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
